version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: luxury-ecommerce-db
    environment:
      POSTGRES_DB: luxury_ecommerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: luxury-ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: luxury-ecommerce-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      CLIENT_URL: http://localhost:3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: luxury_ecommerce
      DB_USER: postgres
      DB_PASSWORD: postgres123
      JWT_SECRET: your-super-secret-jwt-key-here-change-in-production
      STRIPE_SECRET_KEY: sk_test_your_stripe_secret_key_here
      STRIPE_PUBLISHABLE_KEY: pk_test_your_stripe_publishable_key_here
      STRIPE_WEBHOOK_SECRET: whsec_your_webhook_secret_here
      REDIS_URL: redis://redis:6379
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./uploads:/app/uploads
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Frontend (for development)
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    container_name: luxury-ecommerce-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000
      REACT_APP_STRIPE_PUBLISHABLE_KEY: pk_test_your_stripe_publishable_key_here
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ecommerce-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  ecommerce-network:
    driver: bridge
